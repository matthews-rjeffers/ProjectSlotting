// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectScheduler.Data;

#nullable disable

namespace ProjectScheduler.Migrations
{
    [DbContext(typeof(ProjectSchedulerDbContext))]
    [Migration("20251008184439_AddAllocationTypeToProjectAllocation")]
    partial class AddAllocationTypeToProjectAllocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectScheduler.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CRPDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("EstimatedDevHours")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("EstimatedOnsiteHours")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("GoLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JiraLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UATDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("CRPDate");

                    b.HasIndex("ProjectNumber")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectScheduler.Models.ProjectAllocation", b =>
                {
                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationId"));

                    b.Property<decimal>("AllocatedHours")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("AllocationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SquadId")
                        .HasColumnType("int");

                    b.HasKey("AllocationId");

                    b.HasIndex("SquadId", "AllocationDate");

                    b.HasIndex("ProjectId", "SquadId", "AllocationDate")
                        .IsUnique();

                    b.ToTable("ProjectAllocations");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Squad", b =>
                {
                    b.Property<int>("SquadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SquadId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SquadLeadName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SquadName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SquadId");

                    b.HasIndex("SquadName");

                    b.ToTable("Squads");

                    b.HasData(
                        new
                        {
                            SquadId = 1,
                            IsActive = true,
                            SquadLeadName = "TBD",
                            SquadName = "Squad Alpha"
                        },
                        new
                        {
                            SquadId = 2,
                            IsActive = true,
                            SquadLeadName = "TBD",
                            SquadName = "Squad Beta"
                        },
                        new
                        {
                            SquadId = 3,
                            IsActive = true,
                            SquadLeadName = "TBD",
                            SquadName = "Squad Gamma"
                        });
                });

            modelBuilder.Entity("ProjectScheduler.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamMemberId"));

                    b.Property<decimal>("DailyCapacityHours")
                        .HasColumnType("decimal(4,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SquadId")
                        .HasColumnType("int");

                    b.HasKey("TeamMemberId");

                    b.HasIndex("SquadId")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            TeamMemberId = 1,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 1",
                            Role = "ProjectLead",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 2,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 2",
                            Role = "ProjectLead",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 3,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 3",
                            Role = "ProjectLead",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 4,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 1",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 5,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 2",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 6,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 3",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 7,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 4",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 8,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 5",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 9,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 6",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 10,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 7",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 11,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 8",
                            Role = "Developer",
                            SquadId = 1
                        },
                        new
                        {
                            TeamMemberId = 12,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 1",
                            Role = "ProjectLead",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 13,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 2",
                            Role = "ProjectLead",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 14,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 3",
                            Role = "ProjectLead",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 15,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 1",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 16,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 2",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 17,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 3",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 18,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 4",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 19,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 5",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 20,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 6",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 21,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 7",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 22,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 8",
                            Role = "Developer",
                            SquadId = 2
                        },
                        new
                        {
                            TeamMemberId = 23,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 1",
                            Role = "ProjectLead",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 24,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 2",
                            Role = "ProjectLead",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 25,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Project Lead 3",
                            Role = "ProjectLead",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 26,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 1",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 27,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 2",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 28,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 3",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 29,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 4",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 30,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 5",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 31,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 6",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 32,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 7",
                            Role = "Developer",
                            SquadId = 3
                        },
                        new
                        {
                            TeamMemberId = 33,
                            DailyCapacityHours = 6.5m,
                            IsActive = true,
                            MemberName = "Developer 8",
                            Role = "Developer",
                            SquadId = 3
                        });
                });

            modelBuilder.Entity("ProjectScheduler.Models.ProjectAllocation", b =>
                {
                    b.HasOne("ProjectScheduler.Models.Project", "Project")
                        .WithMany("ProjectAllocations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectScheduler.Models.Squad", "Squad")
                        .WithMany("ProjectAllocations")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("ProjectScheduler.Models.TeamMember", b =>
                {
                    b.HasOne("ProjectScheduler.Models.Squad", "Squad")
                        .WithMany("TeamMembers")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Project", b =>
                {
                    b.Navigation("ProjectAllocations");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Squad", b =>
                {
                    b.Navigation("ProjectAllocations");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
