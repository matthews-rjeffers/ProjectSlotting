// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectScheduler.Data;

#nullable disable

namespace ProjectScheduler.Migrations
{
    [DbContext(typeof(ProjectSchedulerDbContext))]
    partial class ProjectSchedulerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectScheduler.Models.OnsiteSchedule", b =>
                {
                    b.Property<int>("OnsiteScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OnsiteScheduleId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EngineerCount")
                        .HasColumnType("int");

                    b.Property<string>("OnsiteType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OnsiteScheduleId");

                    b.HasIndex("ProjectId");

                    b.ToTable("OnsiteSchedules");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Crpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CRPDate");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("EstimatedDevHours")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("EstimatedOnsiteHours")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("GoLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JiraLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Uatdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UATDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex(new[] { "Crpdate" }, "IX_Projects_CRPDate");

                    b.HasIndex(new[] { "ProjectNumber" }, "IX_Projects_ProjectNumber")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectScheduler.Models.ProjectAllocation", b =>
                {
                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationId"));

                    b.Property<decimal>("AllocatedHours")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<DateOnly>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("AllocationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SquadId")
                        .HasColumnType("int");

                    b.HasKey("AllocationId");

                    b.HasIndex(new[] { "ProjectId", "SquadId", "AllocationDate" }, "IX_ProjectAllocations_ProjectId_SquadId_AllocationDate")
                        .IsUnique();

                    b.HasIndex(new[] { "SquadId", "AllocationDate" }, "IX_ProjectAllocations_SquadId_AllocationDate");

                    b.ToTable("ProjectAllocations");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Squad", b =>
                {
                    b.Property<int>("SquadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SquadId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SquadLeadName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SquadName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SquadId");

                    b.HasIndex(new[] { "SquadName" }, "IX_Squads_SquadName");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("ProjectScheduler.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamMemberId"));

                    b.Property<decimal>("DailyCapacityHours")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SquadId")
                        .HasColumnType("int");

                    b.HasKey("TeamMemberId");

                    b.HasIndex(new[] { "SquadId" }, "IX_TeamMembers_SquadId")
                        .HasFilter("([IsActive]=(1))");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("ProjectScheduler.Models.OnsiteSchedule", b =>
                {
                    b.HasOne("ProjectScheduler.Models.Project", "Project")
                        .WithMany("OnsiteSchedules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectScheduler.Models.ProjectAllocation", b =>
                {
                    b.HasOne("ProjectScheduler.Models.Project", "Project")
                        .WithMany("ProjectAllocations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectScheduler.Models.Squad", "Squad")
                        .WithMany("ProjectAllocations")
                        .HasForeignKey("SquadId")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("ProjectScheduler.Models.TeamMember", b =>
                {
                    b.HasOne("ProjectScheduler.Models.Squad", "Squad")
                        .WithMany("TeamMembers")
                        .HasForeignKey("SquadId")
                        .IsRequired();

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Project", b =>
                {
                    b.Navigation("OnsiteSchedules");

                    b.Navigation("ProjectAllocations");
                });

            modelBuilder.Entity("ProjectScheduler.Models.Squad", b =>
                {
                    b.Navigation("ProjectAllocations");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
